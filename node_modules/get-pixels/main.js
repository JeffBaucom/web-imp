document.getElementById("upload").onclick = function() {handleFileSelect();};
document.getElementById("save").onclick = function() {saveImage();};
document.getElementById("sepia").onclick = function() {sepia();};
document.getElementById("clear").onclick= function() {clear();};
document.getElementById("apply").onclick= function() {apply();};
document.getElementById("run").onclick= function() {run();};
document.getElementById("red").oninput = function() {updateRed();};
document.getElementById("green").oninput = function() {updateGreen();};
document.getElementById("blue").oninput = function() {updateBlue();};
document.getElementById("brightness").oninput = function() {brightness();};
document.getElementById("contrast").oninput = function() {contrast();};

var getPixels = require('get-pixels');
var savePixels = require('save-pixels');
var ndarrayOps = require('ndarray-ops');
var image = false;
var imageArray = false;
var ndarray = require('ndarray');
var canvas = document.getElementById("canvas");
var red, green, blue = false;
var original = false;
var originalRed = false;
var originalGreen = false;
var originalBlue = false;
var modRed = false;
var modGreen = false;
var modBlue = false;
var bApplied = false;
var cApplied = false;


function handleFileSelect()
  {               
    if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
      alert('The File APIs are not fully supported in this browser.');
      return;
    }   

    input = document.getElementById('fileInput');
    if (!input) {
      alert("Um, couldn't find the fileinput element.");
    }
    else if (!input.files) {
      alert("This browser doesn't seem to support the `files` property of file inputs.");
    }
    else if (!input.files[0]) {
      alert("Please select a file before clicking 'Load'");               
    }
    else {
      file = input.files[0];
      fr = new FileReader();
      fr.onload = function () {
      		image = fr.result;
            processPixels();
            //saveImage();
       };
      //$('#preview').attr('src', e.target.result);
      //fr.readAsText(file);
      //
      fr.readAsDataURL(file);
    }
  }

 function processPixels() {
 	getPixels(image, function(err, pixels) {
 		if (err) {
 			console.log(err);
 			return;
 		}
 		imageArray = pixels;
 		console.log("got pixels", pixels.shape);
 		
 		red = imageArray.pick(null, null, 0);
 		green = imageArray.pick(null, null, 1);
 		blue = imageArray.pick(null, null, 2);
 		console.log(red.shape);
 		// for (var i = 0; i < imageArray.shape[0]; i++) {
 		// 	for (var j = 0; j < imageArray.shape[1]; j++) {
 		// 		red.set(i,j, 255);
 		// 	}
 		// }
 		image = savePixels(imageArray, "canvas");
 		console.log('now displaying');
 		canvas.width = imageArray.shape[0];
 		canvas.height = imageArray.shape[1];
 		canvas.getContext("2d").drawImage(image, 0, 0);
 	});
 	getPixels(image, function(err, store) {
 		if (err) {
 			console.log(err);
 		}
 		originalRed = store.pick(null, null, 0);
 		originalGreen = store.pick(null, null, 1);
 		originalBlue = store.pick(null, null, 2);
 		original = store;
 	});
 	getPixels(image, function(err, store) {
 		if (err) {
 			console.log(err);
 		}
 		modRed = store.pick(null, null, 0);
 		modGreen = store.pick(null, null, 1);
 		modBlue = store.pick(null, null, 2);
 	});
}

function clear() {
	ndarrayOps.assign(red, originalRed);
	ndarrayOps.assign(green, originalGreen);
	ndarrayOps.assign(blue, originalBlue);

	render();
}

function render() {
	imageArray = sanitize(imageArray);
	image = savePixels(imageArray, "canvas");
 	canvas.getContext("2d").drawImage(image, 0, 0);
}

function sanitize(ndarr) {
	for (var i = 0; i < ndarr.shape[0]; i++) {
		for (var j = 0; j < ndarr.shape[1]; j++) {
			for (var k = 0; k < ndarr.shape[2]; k++) {
				if (ndarr.get(i, j, k) > 255) {
					ndarr.set(i, j, k, 255);
				} else if (ndarr.get(i, j, k) < 0) {
					ndarr.set(i, j, k, 0);
				}
			}
		}
	}
	return ndarr;
}

 function updateRed() {
 	var factor = document.getElementById('red').value;
 	for (var i = 0; i < imageArray.shape[0]; i++) {
 			for (var j = 0; j < imageArray.shape[1]; j++) {
 				var originalValue = originalRed.get(i, j);
 				var newValue = originalValue + ((255 - originalValue)*((factor)/100));
 				if (newValue > 255) { newValue = 255;}
 				red.set(i,j, newValue);

 			}
 		}
 	render();
 }

  function updateGreen() {
 	var factor = document.getElementById('green').value;
 	for (var i = 0; i < imageArray.shape[0]; i++) {
 			for (var j = 0; j < imageArray.shape[1]; j++) {
 				var originalValue = originalGreen.get(i, j);
 				var newValue = originalValue + ((255 - originalValue)*((factor)/100));
 				if (newValue > 255) { newValue = 255;}
 				green.set(i,j, newValue);

 			}
 		}
 	render();
 }
  function updateBlue() {
 	var factor = document.getElementById('blue').value;
 	for (var i = 0; i < imageArray.shape[0]; i++) {
 			for (var j = 0; j < imageArray.shape[1]; j++) {
 				var originalValue = originalBlue.get(i, j);
 				var newValue = originalValue + ((255 - originalValue)*((factor)/100));
 				if (newValue > 255) { newValue = 255;}
 				blue.set(i,j, newValue);

 			}
 		}
 	render();
 }

function sepia() {
 	var max = 0;
 	for (var i = 0; i < imageArray.shape[0]; i++) {
 			for (var j = 0; j < imageArray.shape[1]; j++) {
 				var outputRed = (red.get(i, j) * 0.393) + (green.get(i, j) *0.769) + (blue.get(i, j) * 0.189);
				var outputGreen = (red.get(i, j) * 0.349) + (green.get(i, j) *0.686) + (blue.get(i, j) * 0.168);
				var outputBlue = (red.get(i, j) * 0.272) + (green.get(i, j) *0.534) + (blue.get(i, j) * 0.131);
 				if (outputRed > 255) {
 					outputRed = 255
 				}
 				if (outputGreen > 255) {
 					outputGreen = 255
 				}
 				if (outputBlue > 255) {
 					outputBlue = 255
 				}
 				red.set(i,j, outputRed);
 				green.set(i,j, outputGreen);
 				blue.set(i,j, outputBlue);

 			}
 	}
 	render();
}

function brightness() {
	var factor = document.getElementById('brightness').value;
	console.log(factor);
	brightnessAdjust(imageArray, factor);
	render();
}

function contrast() {
	var factor = document.getElementById('contrast').value;
		console.log(factor);

	contrastAdjust(imageArray, factor);
	render();
}

function brightnessAdjust(imageArray, factor) {
	console.log("factor" + factor);
	if (cApplied) {
		ndarrayOps.assign(modRed, red);
		ndarrayOps.assign(modGreen, green);
		ndarrayOps.assign(modBlue, blue);
	}
	for(var i = 0; i < imageArray.shape[0]; i+=1) {
		for(var j = 0; j < imageArray.shape[1]; j+=1) {
			var value =  modRed.get(i, j) + (255.0 * (factor/100)) ;
			var value2 =  modGreen.get(i, j) + (255.0 * (factor/100));
			var value3 =  modBlue.get(i, j) + (255.0 *(factor/100));
			if (value > 255) {
				value = 255;
			} else if(value < 0) {
				value = 0;
			}
			if (value2 > 255) {
				value2 = 255;
			} else if(value2 < 0) {
				value2 = 0;
			}
			if (value3 > 255) {
				value3 = 255;
			} else if(value3 < 0) {
				value3 = 0;
			}
			red.set(i, j, value);
			green.set(i, j, value2);
			blue.set(i, j, value3);
		}
	}
	console.log("after" + originalRed.get(50, 50));
	bApplied = true;
	cApplied = false;
}

function contrastAdjust(imageData, factor) {
	var data = imageData.data;
	factor = (Number(factor)).toFixed(1);
    var amount = (259.0 * (factor + 255.0)) / (255.0 * (259.0 - factor));
    if (bApplied) {
    	ndarrayOps.assign(modRed, red);
		ndarrayOps.assign(modGreen, green);
		ndarrayOps.assign(modBlue, blue);
    }
    for(var i = 0; i < imageArray.shape[0]; i+=1) {
		for(var j = 0; j < imageArray.shape[1]; j+=1) {
        	var value = (amount * (modRed.get(i, j) - 128.0)) + 128.0;
			var value2 = (amount * (modGreen.get(i, j) - 128.0)) + 128.0;
			var value3 = (amount * (modBlue.get(i, j) - 128.0)) + 128.0;
			if (value > 255) {
				value = 255;
			} else if(value < 0) {
				value = 0;
			}
			if (value2 > 255) {
				value2 = 255;
			} else if(value2 < 0) {
				value2 = 0;
			}
			if (value3 > 255) {
				value3 = 255;
			} else if(value3 < 0) {
				value3 = 0;
			}
			red.set(i, j, value);
			green.set(i, j, value2);
			blue.set(i, j, value3);
    	}
    }
    cApplied = true;
    bApplied = false;
}

function apply() {
	ndarrayOps.assign(originalRed, red);
	ndarrayOps.assign(originalGreen, green);
	ndarrayOps.assign(originalBlue, blue);
}


function run() {
	eval(document.getElementById('code').value);
}